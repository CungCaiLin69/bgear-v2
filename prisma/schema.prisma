// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OTP {
  id        String   @id @default(cuid())
  code      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String? // Nullable for OAuth users
  name           String
  profilePicture String?
  phoneNumber    String?  @unique // nullable until verified
  isVerified     Boolean  @default(false)
  provider       String   @default("local") // "local" for email/password, "google" for OAuth
  role           String   @default("customer")
  has_shop       Boolean  @default(false)
  is_repairman   Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  Shop      Shop?
  Repairman Repairman?
  Bookings  Booking[]
  Orders    Order[]
  Reviews   Review[]

  OTP OTP[]
}

model Shop {
  id          Int      @id @default(autoincrement())
  ownerId     String   @unique
  name        String
  photos      String[]
  services    String[]
  location    String
  phoneNumber String?  @unique // nullable until verified
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id])
  Bookings Booking[]
  Reviews  Review[]
}

model Repairman {
  id               String   @id @default(uuid())
  userId           String   @unique
  skills           String[]
  servicesProvided String[]
  profilePicture   String?
  phoneNumber      String?  @unique
  isVerified       Boolean  @default(false)
  isAvailable      Boolean  @default(true)
  currentLocation  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  userId    String
  shopId    Int
  datetime  DateTime
  issue     String
  status    String   @default("pending") // pending, confirmed, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])
  shop Shop @relation(fields: [shopId], references: [id])
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      String
  repairmanId String?
  address     String
  locationLat Float
  locationLng Float
  vehicleType String
  complaint   String
  status      String    @default("requested")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  canceledAt  DateTime?
  rejectedAt  DateTime?

  user      User       @relation(fields: [userId], references: [id])
  repairman Repairman? @relation(fields: [repairmanId], references: [userId])

  Message Message[]
}

model Review {
  id        Int      @id @default(autoincrement())
  shopId    Int
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shop Shop @relation(fields: [shopId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  orderId    Int
  senderId   String
  senderRole String
  message    String
  createdAt  DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}
